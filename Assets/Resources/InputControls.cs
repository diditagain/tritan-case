//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Resources/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""e57a89ef-b3cd-4ef5-b1dd-5784c50df843"",
            ""actions"": [
                {
                    ""name"": ""MoveControl"",
                    ""type"": ""Value"",
                    ""id"": ""58de6d6f-f35b-4549-b8b4-d1a8a96d73a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Button"",
                    ""type"": ""Button"",
                    ""id"": ""3eb4f1fb-6b5d-49dc-9ecf-41e8a1dc375c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26ecd3ce-00c7-44fb-b21f-f2b64c1436d4"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65b6b974-7cae-4560-a054-7176e29ae914"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainMap
        m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
        m_MainMap_MoveControl = m_MainMap.FindAction("MoveControl", throwIfNotFound: true);
        m_MainMap_Button = m_MainMap.FindAction("Button", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMap
    private readonly InputActionMap m_MainMap;
    private IMainMapActions m_MainMapActionsCallbackInterface;
    private readonly InputAction m_MainMap_MoveControl;
    private readonly InputAction m_MainMap_Button;
    public struct MainMapActions
    {
        private @InputControls m_Wrapper;
        public MainMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveControl => m_Wrapper.m_MainMap_MoveControl;
        public InputAction @Button => m_Wrapper.m_MainMap_Button;
        public InputActionMap Get() { return m_Wrapper.m_MainMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
        public void SetCallbacks(IMainMapActions instance)
        {
            if (m_Wrapper.m_MainMapActionsCallbackInterface != null)
            {
                @MoveControl.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMoveControl;
                @MoveControl.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMoveControl;
                @MoveControl.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMoveControl;
                @Button.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnButton;
                @Button.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnButton;
                @Button.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnButton;
            }
            m_Wrapper.m_MainMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveControl.started += instance.OnMoveControl;
                @MoveControl.performed += instance.OnMoveControl;
                @MoveControl.canceled += instance.OnMoveControl;
                @Button.started += instance.OnButton;
                @Button.performed += instance.OnButton;
                @Button.canceled += instance.OnButton;
            }
        }
    }
    public MainMapActions @MainMap => new MainMapActions(this);
    public interface IMainMapActions
    {
        void OnMoveControl(InputAction.CallbackContext context);
        void OnButton(InputAction.CallbackContext context);
    }
}
